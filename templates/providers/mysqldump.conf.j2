# {{ ansible_managed }}

## Global settings for the mysqldump provider - Requires holland-mysqldump
##
## Unless overwritten, all backup-sets implementing this provider will use
## the following settings.

[mysqldump]

## Override the path where we can find mysql command line utilities
mysql-binpath       = {{ holland_mysqldump_holland_mysqldump_mysql_binpath }}

## One of: flush-lock, lock-tables, single-transaction, auto-detect, none
##
## flush-lock will place a global lock on all tables involved in the backup
## regardless of whether or not they are in the backup-set. If 
## file-per-database is enabled, then flush-lock will lock all tables 
## for every database being backed up. In other words, this option may not
## make much sense when using file-per-database.
##
## lock-tables will lock all tables involved in the backup. If
## file-per-database is enabled, then lock-tables will only lock all the
## tables associated with that database.
##
## single-transaction will force running a backup within a transaction.
## This allows backing up of transactional tables without imposing a lock
## howerver will NOT properly backup non-transactional tables.
##
## Auto-detect will choose single-transaction unless Holland finds
## non-transactional tables in the backup-set.
##
## None will completely disable locking. This is generally only viable
## on a MySQL slave and only after traffic has been diverted, or slave
## services suspended.
lock-method         = {{ holland_mysqldump_lock_method }}

## comma-delimited glob patterns for matching databases
## only databases matching these patterns will be backed up
## default: include everything
databases           = {{ holland_mysqldump_databases }}

## comma-delimited glob patterns to exclude particular 
## databases
exclude-databases   = {{ holland_mysqldump_exclude_databases }}

## only include the specified tables
tables              = {{ holland_mysqldump_tables }}

## exclude specific tables
exclude-tables      = {{ holland_mysqldump_exclude_tables }}

## Whether to dump routines explicitly
## (routines are implicitly included in the mysql database)
dump-routines       = {{ holland_mysqldump_dump_routines }}

## Whether to dump events explicitly.
## Note that this feature requires MySQL 5.1 or later.
dump-events			= {{ holland_mysqldump_dump_events }}

## Whether to stop the slave before commencing with the backup
stop-slave          = {{ holland_mysqldump_stop_slave }}

## Whether to record the binary log name and position at the time of the
## backup.
bin-log-position    = {{ holland_mysqldump_bin_log_position }}

## Whether or not to run FLUSH LOGS in MySQL with the backup. When FLUSH
## LOGS is actually executed depends on which if database filtering is being
## used and whether or not file-per-database is enabled. Generally speaking,
## it does not make sense to use flush-logs with file-per-database since the 
## binary logs will not be consistent with the backup.
flush-logs			= {{ holland_mysqldump_flush_logs }}

## Whether to run a separate mysqldump for each database. Note that while
## this may initially sound like a good idea, it is far simpler to backup
## all databases in one file, although that makes the restore process
## more difficult when only certain data needs to be restored.
file-per-database   = {{ holland_mysqldump_file_per_database }}

## any additional options to the 'mysqldump' command-line utility
## these should show up exactly as they are on the command line
## e.g.: --flush-privileges --reset-master
additional-options  = {{ holland_mysqldump_additional_options }}

## Compression Settings
[compression]

## compress method: gzip, gzip-rsyncable, bzip2, pbzip2, or lzop
## Which compression method to use, which can be either gzip, bzip2, or lzop.
## Note that lzop is not often installed by default on many Linux 
## distributions and may need to be installed separately.
method              = {{ holland_mysqldump_compression_method }}

## Whether to compress data as it is provided from 'mysqldump', or to
## compress after a dump has finished. In general, it is often better to use
## inline compression. The overhead, particularly when using a lower 
## compression level, is often minial since the entire process is often I/O
## bound (as opposed to being CPU bound).
inline              = {{ holland_mysqldump_compression_inline }}

## What compression level to use. Lower numbers mean faster compression, 
## though also generally a worse compression ratio. Generally, levels 1-3
## are considered fairly fast and still offer good compression for textual
## data. Levels above 7 can often cause a larger impact on the system due to
## needing much more CPU resources. Setting the level to 0 effectively 
## disables compresion.
level               = {{ holland_mysqldump_compression_level }}

## If the path to the compression program is in a non-standard location,
## or not in the system-path, you can provide it here.
##
## FIXME: Currently not implemented, compression binary is looked up by
## which.
##
bin-path            = {{ holland_mysqldump_compression_bin_path }}

## MySQL connection settings. Note that Holland will try ot read from
## the provided files defined in the 'defaults-extra-file', although 
## explicitly defining the connection inforamtion here will take precedence.
[mysql:client]
defaults-extra-file = {{ holland_mysqldump_client_defaults_extra_file }}
{% if holland_mysqldump_client_connection %}
{% for key, value in holland_mysqldump_client_connection.items() %}
{{ key }} = {{ value }}
{% endfor %}
{% endif %}
